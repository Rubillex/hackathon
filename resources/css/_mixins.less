@import "_var";

/****
 * Анимация
 ****/
.transit(@prop: all, @time: @transitTime, @ease: @transitEase) {
    transition-property: e(@prop);
    transition-duration: @time;
    transition-timing-function: @ease;
}

.delay(@selector, @count: 1, @step: .1s, @propery: transition-delay, @current: 0) {
    @{selector}:nth-child(@{current}) {
        @{propery}: @current * @step;
    }

    & when (@current < @count) {
        .delay(@selector, @count, @step, @propery, @current + 1);
    }
}

/****
 * Ховеры
 ****/
.hover(@hoverRuleset: false, @focusRuleset: @defaultFocusRuleset, @activeRuleset: @defaultActiveRuleset, @touch: true) {
    & when (@touch = true) {
        @media @mediaNotHover {
            & when not (@hoverRuleset = false) {
                &:active {
                    @hoverRuleset();
                }
            }
        }
    }

    @media @mediaHover {
        & when not (@hoverRuleset = false) {
            &:hover {
                @hoverRuleset();
            }
        }

        & when not (@activeRuleset = false) {
            &:active {
                @activeRuleset();
            }
        }

        & when not (@focusRuleset = false) {
            &:focus-visible {
                @focusRuleset();
            }
        }
    }
}

/****
 * Сброс дефолтных стилей
 ****/
.clear-input() {
    -webkit-appearance: none;
    -moz-appearance: none;
    outline: none !important;
    resize: none;
    box-shadow: none;
    font-family: @font;
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    -webkit-tap-highlight-color: transparent;

    &:focus {
        outline: none;
    }

    &::-ms-reveal,
    &::-ms-clear {
        display: none;
    }

    //noinspection CssInvalidPseudoSelector
    &::-webkit-credentials-auto-fill-button {
        visibility: hidden;
        pointer-events: none;
        position: absolute;
        right: 0;
    }

    &:focus {
        outline: none;
        box-shadow: none;
    }

    //Скрываем стрелки
    /* Chrome, Safari, Edge, Opera */
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Firefox */
    &[type=number] {
        -moz-appearance: textfield;
    }
}

.clear-button() {
    padding: 0;
    border: none;
    outline: none;
    background-color: transparent;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    cursor: pointer;
    text-align: inherit;
    -webkit-tap-highlight-color: transparent;
}

.clear-link(@color: currentColor) {
    color: @color;
    text-decoration: none;
    outline: none !important;
    background-color: transparent;
    -webkit-text-decoration-skip: objects;
    -webkit-tap-highlight-color: transparent;
}

.clear-list() {
    margin: 0;
    padding: 0;
    list-style: none;
}

.hide-input() {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    //noinspection CssUnknownProperty
    -webkit-clip-path: inset(50%) !important;
    clip-path: inset(50%) !important;
    height: 1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
    white-space: nowrap !important
}

/****
 * Sizes
 ****/
.size(@width, @height: @width) {
    width: @width;
    height: @height;
}

.get-image-size(@src, @ratio: 1) {
    width: image-width(@src) * @ratio;
    height: image-height(@src) * @ratio;
}

.grid(@columnsCount: @gridColumnsCount, @columnGap: var(--grid-gap), @rowGap: @columnGap) {
    display: grid;
    grid-template-columns: repeat(@columnsCount, 1fr);
    grid-column-gap: @columnGap;
    grid-row-gap: @rowGap;
}

.column-width(@count: 1, @total: @gridColumnsCount, @gap: var(--grid-gap), @property: width) {
    @{property}: calc(@count * (100% - @gap * (@total - 1)) / @total + @gap * (@count - 1));
}


.template-columns(@count: 1, @total: @gridColumnsCount, @gap: var(--grid-gap)) {
    grid-template-columns: repeat(@total/@count, calc(@count * (100% - @gap * (@total - 1)) / @total + @gap * (@count - 1)));
}

.proportional-size(@ratio: 1, @position: relative) {
    position: @position;

    &:before {
        position: relative;
        content: '';
        display: block;
        padding-bottom: calc(@ratio * 100%);
    }
}

/****
 * Разное
 ****/
.pseudo(@position: absolute) {
    content: '';

    & when (@position = absolute) {
        position: absolute;
    }

    & when (@position = relative) {
        position: relative;
        display: inline-block;
        vertical-align: middle;
    }
}

.line-clamp(@line-count: 3) {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    //noinspection CssUnknownProperty
    -webkit-line-clamp: @line-count;
}

.picture(@ratio: 1, @fit: scale-down, @position: relative, @overflow: hidden) {
    .proportional-size(@ratio, @position);
    overflow: @overflow;

    > img {
        .size(100%);
        position: absolute;
        top: 0;
        left: 0;
        object-fit: @fit;
        border-radius: inherit;
    }
}

.avoid-break() {
    -webkit-column-break-inside: avoid;
    page-break-inside: avoid;
    break-inside: avoid;
}

.responsive(@name, @size, @ratio) {
    // responsive генерирует плравила только для @media, чтобы оставалось объявление переменной, и шторм ее видел
    //@{name}: @size;

    @media @mediaXl {
            @{name}: round(@size * @ratio);
    }

    @media @mediaSm {
            @{name}: round(@size * pow(@ratio, 4));
    }

    @media @mediaXs {
            @{name}: round(@size * pow(@ratio, 5));
    }
}
